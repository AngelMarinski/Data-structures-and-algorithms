/* https://www.hackerrank.com/contests/sdatest3/challenges/test3-zad1 */

#include <cmath>
#include <cstdio>
#include <algorithm>
#include <iostream>
#include <vector>
#include <string>
using namespace std;

class Node {
public:
    Node();
    Node(int value);

    Node* next;
    int data;
};

Node::Node() {
    this->data = 0;
    this->next = nullptr;
}
Node::Node(int value)
    :data(value)
    ,next(nullptr){
}

class SinglyLinkedList {
public:
    SinglyLinkedList();
    void add(int val, int pos);
    void remove(int pos);
    void reverse();
    bool is_palindrom();
    int count(int val);
    void remove_all(int val);
    void group(int start_pos, int end_pos);
    void push_front(int val);
    void pop_front();
    bool valid_pos(int pos);
    void print();
private:
    Node* head;
    Node* tail;
    int size;
};

SinglyLinkedList::SinglyLinkedList() {
    this->head = nullptr;
    this->tail = nullptr;
    this->size=0;
}
void SinglyLinkedList::add(int val, int pos) {
    if (head == nullptr) {
        this->head = new Node(val);
        this->tail = this->head;
        if (pos != 0){
            cout << "add_last";
        }
    }
    else if (pos >= 0 && pos < size) {
        if (pos == 0) {
            push_front(val);
            return;
        }
        Node* node = head;
        Node* to_insert = new Node(val);
        int counter = 0;
        while (counter < pos - 1) {
            node = node->next;
            counter++;
        }
        if(node!=nullptr)
            to_insert->next = node->next;
        node->next = to_insert;
    }
    else {
        this->tail->next = new Node(val);
        this->tail = this->tail->next;
        if (pos > size || pos<0){
            cout << "add_last";
        }
    }
    this->size++;
}

void SinglyLinkedList::push_front(int val) {
    if (this->head == nullptr) {
        this->head = new Node(val);
        this->tail = this->head;
    }
    else {
        Node* node = new Node(val);
        node->next = this->head;
        this->head = node;
    }
    this->size++;
}

void SinglyLinkedList::pop_front() {
    if (this->head == nullptr)return;
    if (this->head == this->tail) {
        delete this->head;
        this->head = nullptr;
        this->tail = this->head;
    }
    else {
        Node* temp = this->head;
        this->head = this->head->next;
        delete temp;
    }
    this->size--;
}

bool SinglyLinkedList::valid_pos(int pos) {
    if (pos >= 0 && pos <= this->size - 1)
        return true;
    return false;
}

void SinglyLinkedList::remove(int pos) {
    if (!valid_pos(pos)) {
        cout << "remove_failed";
        return;
    }
    if (pos == 0) { 
        pop_front();
        return;
    }
    Node* node = head;
    int counter = 0;
    while (counter < pos - 1) {
        node = node->next;
        counter++;
    }
    Node* temp = node->next;
    node->next = node->next->next;
    if (temp == this->tail)
        this->tail = node;
    delete temp;
    this->size--;
}

void SinglyLinkedList::reverse() {
    Node* next = nullptr;
    Node* previous = nullptr;
    Node* curr = this->head;
    this->tail = this->head;
    while (curr != nullptr) {
        next = curr->next;
        
        curr->next = previous;

        previous = curr;
        curr = next;
    }
    this->head = previous;
}

bool SinglyLinkedList::is_palindrom() {
    if (this->head == nullptr)
        return true;
    vector<int> palindrom;
    Node* node = this->head;
    while (node != nullptr) {
        palindrom.push_back(node->data);
        node = node->next;
    }
    int l = 0, r = palindrom.size() - 1;
    while (l <= r) {
        if (palindrom[l] != palindrom[r])
            return false;
        l++;
        r--;
    }
    return true;
}

int SinglyLinkedList::count(int val) {
    Node* node = this->head;
    int counter = 0;
    while (node != nullptr) {
        if (node->data == val)counter++;
        node = node->next;
    }
    return counter;
}

void SinglyLinkedList::remove_all(int val) {
    Node* node = this->head;
    Node* prev = nullptr;
    int counter = 0;
    while (node != nullptr) {
        prev = node;
        node = node->next;
        if (prev->data == val) {
            remove(counter);
            counter--;
        }
        counter++;
    }
}


void SinglyLinkedList::group(int start_pos, int end_pos) {
    if (start_pos > end_pos || !valid_pos(start_pos) || !valid_pos(end_pos)) {
        cout << "fail_grouping";
        return;
    }
    Node* node = head;
    int sum = 0;
    if (start_pos == 0) {
        for (int i = 0; i <= end_pos; i++) {
            sum += head->data;
            pop_front();
        }
        Node* new_node = new Node(sum);
        new_node->next = head;
        this->head = new_node;
        size++;
        return;
    }
    for (int i = 0; i < start_pos - 1; i++)
        node = node->next;

    Node* save_link = node;
    node = node->next;
    for (int i = start_pos; i <= end_pos; i++) {
        sum += node->data;
        Node* temp = node;
        node = node->next;
        delete temp;
    }
    Node* grouped_node = new Node(sum);
    save_link->next = grouped_node;
    if(node!=nullptr)
        grouped_node->next = node;
    if (node == nullptr)
        this->tail = grouped_node;
    this->size = this->size - (end_pos - start_pos);
}

void SinglyLinkedList::print() {
    if (head == nullptr)return;
    Node* node = head;
    while (node != nullptr) {
        cout << node->data << "#";
        node = node->next;
    }
}

int main() {
    int N = 0;
    cin >> N;
    while (N--) {
        int operations,val,pos;
        SinglyLinkedList myList;
        cin >> operations;
        while (operations--) {
            string command;
            cin >> command;
            if (command == "add") {
                cin >> val >> pos;
                myList.add(val, pos);
            }
            else if (command == "remove") {
                cin >> pos;
                myList.remove(pos);
            }
            else if (command == "count") {
                cin >> val;
                cout<<myList.count(val);
            }
            else if (command == "remove_all") {
                cin >> val;
                myList.remove_all(val);
            }
            else if (command == "group") {
                int start, end;
                cin >> start >> end;
                myList.group(start, end);
            }
            else if (command == "print")
                myList.print();
            else if (command == "is_palindrom")
                if (myList.is_palindrom())cout << "true";
                else cout << "false";
            else if (command == "reverse")
                myList.reverse();
        }
        cout << "\n";
    }
}
